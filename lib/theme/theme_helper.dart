
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:sagr/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {


    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray10001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.pink600,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray10002,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 16.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 14.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray60001,
          fontSize: 12.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 24.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 12.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onPrimary.withOpacity(1),
          fontSize: 10.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 20.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 18.fSize,
          fontFamily: Get.locale == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 14.fSize,
          fontFamily: GetStorage().read('lang') == 'ar' ? 'Nunito' : 'Nunito',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFD20653),
    primaryContainer: Color(0XFFBCBEC2),
    secondaryContainer: Color(0X19D20653),

    // Error colors
    errorContainer: Color(0XFF4F4F4F),
    onError: Color(0XFF292D32),
    onErrorContainer: Color(0XFF121212),

    // On colors(text colors)
    onPrimary: Color(0X0CFFFFFF),
    onPrimaryContainer: Color(0XFF272833),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray900 => Color(0XFF363333);
  Color get blueGray90001 => Color(0XFF333333);
  Color get blueGray90002 => Color(0XFF323842);

  // Gray
  Color get gray100 => Color(0XFFF3F6F6);
  Color get gray10001 => Color(0XFFF6F6F6);
  Color get gray10002 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE9EAEC);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray30001 => Color(0XFFE0E2E8);
  Color get gray400 => Color(0XFFBCBCBC);
  Color get gray50 => Color(0XFFF8F8FA);
  Color get gray500 => Color(0XFFABABAB);
  Color get gray50001 => Color(0XFF9095A0);
  Color get gray5001 => Color(0XFFF7F7FC);
  Color get gray600 => Color(0XFF808080);
  Color get gray60001 => Color(0XFF828282);
  Color get gray800 => Color(0XFF44464D);
  Color get gray900 => Color(0XFF051244);

  // Green
  Color get green800 => Color(0XFF15A208);

  // Indigo
  Color get indigo700 => Color(0XFF265697);

  // LightGreen
  Color get lightGreenA700 => Color(0XFF49C00F);
  Color get lightGreenA70001 => Color(0XFF89D81A);

  // Lime
  Color get lime600 => Color(0XFFBDDE23);

  // Orange
  Color get orange400 => Color(0XFFFF951D);

  // Pink
  Color get pink50 => Color(0XFFFBE7EE);
  Color get pink600 => Color(0XFFD30C50);
  Color get pink60001 => Color(0XFFD30B51);
  Color get pink900 => Color(0XFF8C4444);

  // Red
  Color get red500 => Color(0XFFFB4242);

  // Teal
  Color get tealA700 => Color(0XFF0EC784);
  Color get tealA70001 => Color(0XFF0FC785);

  // Yellow
  Color get yellow50 => Color(0XFFFFF5E9);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
